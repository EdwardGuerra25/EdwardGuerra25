# -*- coding: utf-8 -*-
"""Laboratorio2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkXfKJmnIaj5ZyTwh_updV3T1klqO8lM
"""

# importamos librerias
import time as t
import numpy as np

# con funciones estandares
x = np.random. random(1000000) # genera un arreglo aleatorio de datos enteros
start = t.time()           # toma el tiempo inicial
sum(x)/len(x)               # promedio
end = t.time() - start     # calcula cuando demora el ciclo
print('function elapsed ',end)

# con numpy
x = np.random. random(1000000) # genera un arreglo aleatorio de datos enteros
start = t.time()           # toma el tiempo inicial
np.sum(x)/len(x)               # promedio
end = t.time() - start     # calcula cuando demora el ciclo
print('function elapsed ',end)

"""***Creando y salvando arreglos***"""

import numpy as np

x = np.array([10, 20, 30, 40])
print(x, type(x), x.dtype)

x.shape

x = np.array([[int(j*i) for i in range(1,5)] for j in range(1,6)])

x, x.shape, x.dtype, x.size

x = np.array(['Inteligencia', 'Artificial'])
print(x, x.shape, type(x), x.dtype, x.size)

x = np.array([1,2,3,4, 'Inteligencia', 'Artificial'])
print(x, x.shape, type(x), x.dtype, x.size)

x = np.array([1,2,3.0,4])
print(x, x.shape, type(x), x.dtype, x.size)

x = np.array([1,2,3,4])
np.save('saved_array', x)
del x # borramos la variable, solo como ejemplo

type(x)

x = np.load('saved_array.npy')
print(x)

"""***Utilizando funciones built-in para crear ndarrays***"""

import numpy as np
x = [1,2,3,4,5,6,7,8,9,10]
np.array(x)

x = np.zeros((5,8))
x

x = np.ones((3,4))
y = np.eye(5)
print(x)
print()
print(y)

x = np.full((4,4),2.2)
print(x)

x = np.diag([1, 2, 3, 4])
x

x = np.arange(10)
x

x = np.arange(2,10)
x

x = np.arange(2,20,3)
x

x = np.linspace(0, 30, 20)
print(x)

x = np.linspace(0, 30, 20, endpoint=False)
print(x)

x = np.reshape(x, (5,4))
print(x)

x = np.reshape(x, (8,10))
print(x)

x = np.arange(30).reshape((6,5))
print(x)

x = np.linspace(1, 30, 20, endpoint=False).reshape((10,2))
print(x)

x = np.random.random((3,9))
print(x)

x = np.random.randint(2, 20, (4,3))
print(x)

x = np.random.normal(0, 0.2, size=(5, 4))
print(x)

mn = np.mean(x)
st = np.std(x)
ma = np.max(x)
mi = np.min(x)
su = np.sum(x)
print(f'Media: {mn}\nDesv Est: {st}\nMáximo: {ma}\nMínimo: {mi}\nTotal: {su}')

"""***Accediendo. borrando e insertando elementos en los arreglos***"""

x = np.array([1,2,3,4,5,6])
print('1st:',x[0])
print('3rd:',x[2])
print('last',x[-1])

x = np.array(np.arange(20).reshape(10,2))
print(x)
print()
print('Elemento en 0,0:', x[0,0])
print('Elemento en 4,1:', x[4,1])
print('Elemento en 9,1:', x[9,1])

x[9,1] = -2
print(x)

y = np.delete(x, 0, axis=0)
print(x)
print()
print(y)

y = np.delete(x, 0, axis=1)
print(x)
print()
print(y)

x = np.arange(10)
x

x = np.append(x, -999)
x

x = np.array(np.arange(10))
x = np.append(x, [20, 30])
print(x)

x = np.array(np.linspace(2, 10, 20)).reshape((5,4))
y = np.append(x,[[1,2,3,4]],axis=0)
print(x,'\n\n',y)

x = np.array(np.linspace(2, 10, 20)).reshape((5,4))
y = np.append(x,[[1],[2],[3],[4],[5]],axis=1)
print(x,'\n\n',y)

x = np.array([[1,2,4],[4,5,6]])
x = np.append(x, [7,8,9,10], axis=0)

x = np.array([2,4,8,16])
x

y = np.insert(x, 1, [5,6,7,8], axis=0)
print(x)
print()
print(y)

x = np.reshape(x, (2,2))
y = np.insert(x, 1, [32, 64], axis=1)
print(x)
print()
print(y)

x = np.arange(10).reshape((5,2))
print(x)

y = np.arange(4).reshape((2,2))
print(y)

z = np.vstack((x,y))
print(z)

x = np.arange(10).reshape((5,2))
print(x)

y = np.arange(5).reshape((5,-1))
print(y)

z = np.hstack((x,y))
print(z)

"""# ***Division por partes de numpy arrays***"""

x = np.arange(1,21).reshape((5,4))
print(x)

y = x[1:3,1:4]
print(y)

print(x)
print()
print(x[1: , :3])

y = x[:,2]
print(y, y.shape)

y = x[3, :]
print(y, y.shape)

y = x[3:4, :]
print(y, y.shape)

y = x[:,2:3]
print(y, y.shape)

x = np.linspace(0,10,20).reshape((5,4))
print(x)

y = x[1:, 2:]
print(y)

y[-1, -1] = -1
y

x

x = np.array(np.arange(20)).reshape(5,4)
print(x)

y = x[1:, 1:].copy()
y[-1,-1] = -2
y

x

np.diag(x)

np.diag(x, k=1)

np.diag(x, k=-1)

x = np.array([[1,2,3],[4,5,6],[7,8,9],[1,3,9]])
x

print(np.unique(x))

"""# ***Indexamiento booleano***"""

x = np.arange(30).reshape((6,5))
x

x[x>14]

x[x<=5]

print(x[(x<10) & (x>4)])

x[x>24] = -4
print(x)

x = np.arange(1,6)
y = np.array([6,7,8,2,4])

print(np.intersect1d(x,y))
print(np.setdiff1d(x,y))
print(np.union1d(x,y))

x = np.random.randint(2, 15, size=(5,))
x

print(np.sort(x))
print(x)

print(np.sort(np.unique(x)))
print(x)

x = np.random.randint(2,10, size=(1,10))
print(x)
x.sort()
print(x)

x = np.random.randint(0,20, size=(5,4))
print(x)

print(np.sort(x, axis=0))

print(np.sort(x, axis=1))

"""# ***Operadores aritméticos y broadcasting***"""

x = np.random.randint(1, 10, size=(10,))
y = np.random.randint(49, 60, size=(10,))

print(x)
print(y)

print(x+y)
print(np.add(x,y))

print(x-y)
print(np.subtract(x,y))

print(x*y)
print(np.multiply(x,y))

print(x/y)
print(np.divide(x,y))

x = np.random.randint(1, 10, size=(3,4))
y = np.random.randint(3, 20, size=(3,4))

print(x + y)

print(x - y)

print(x*y)

print(x/y)

# tenemos el arreglo original x
x

print(np.exp(x))

print(np.sqrt(x))

print(np.power(x,2))

print('Suma:', x.sum())
print('Suma-rows:', x.sum(axis=0))
print('Suma-cols:', x.sum(axis=1))
print('Media:', x.mean())
print('Media-rows:',x.mean(axis=0))
print('Media-cols:',x.mean(axis=1))

print('Stdev:', x.std())
print('Max:', x.max())
print('Min:', x.min())

print(x)

print(x + 2.2)

print(1.2-x)

print(0.5*x)

print(x/4)

x = np.random.randint(0,20, size=(5,3))
y = np.random.randint(5,15, size=(1,3))
print(x)
print()
print(y)

print(x+y)

"""# ***Intentelo ud. ahora***"""

